# Generated by Django 3.2.5 on 2022-06-07 07:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('sex', models.CharField(choices=[('M', 'M'), ('F', 'F')], max_length=2, verbose_name='Sex')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('country', models.CharField(max_length=40, verbose_name='country')),
                ('user_type', models.CharField(choices=[('PASSENGER', 'PASSENGER'), ('DRIVER', 'DRIVER')], max_length=20, verbose_name='Who Are You ?')),
                ('status', models.CharField(choices=[('online', 'online'), ('offline', 'offline')], default='online', max_length=10, verbose_name='status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver_plate_number', models.CharField(max_length=7, unique=True, verbose_name='License Plate')),
                ('car_color', models.CharField(choices=[('YELLOW', 'YELLOW'), ('BLACK', 'BLACK'), ('WHITE', 'WHITE'), ('BLUE', 'BLUE'), ('BROWN', 'BROWN'), ('RED', 'RED'), ('GREEN', 'GREEN')], max_length=20, verbose_name='Car Color')),
                ('max_place', models.IntegerField(validators=[users.validators.min_place], verbose_name='Maximum number of place in car')),
                ('nbp', models.IntegerField(default=1, validators=[users.validators.check_plc], verbose_name='Current Number Of Place Available')),
                ('car_type', models.CharField(choices=[('CAR', 'CAR'), ('BUS', 'BUS')], max_length=20, verbose_name='Car Type')),
                ('car_brand', models.CharField(choices=[('TOYOTA', 'TOYOTA'), ('HONDAS', 'HONDAS'), ('MERCEDES', 'MERCEDES'), ('BMW', 'BMW'), ('HYUNDAI', 'HYUNDAI'), ('LEXUS', 'LEXUS'), ('PEUGEOT', 'PEUGEOT'), ('ROLL ROYCE', 'ROLL ROYCE')], max_length=30)),
                ('lat', models.CharField(max_length=20, verbose_name='Latitude')),
                ('lng', models.CharField(max_length=20, verbose_name='Longitude')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
